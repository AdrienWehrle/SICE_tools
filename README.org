# SICE_tools
Tools developed as part of the [[http://snow.geus.dk/][SICE project]] at [[https://www.geus.dk/][GEUS]] (Geological Survey of Denmark and Greenland). 


* Table of Contents                               :toc_2:noexport:
- [[#development-environment][Development Environment]]
- [[#tools-description][Tools description]]
  - [[#extract_esalcpy][extract_esalc.py]]
  - [[#extract_arcticdempy][extract_arcticdem.py]]
  - [[#get_IBOARpy][get_IBOAR.py]]
  - [[#SICE_products_availabilitypy][SICE_products_availability.py]]
  - [[#get_correlationspy][get_correlations.py]]
  - [[#sice_tools_guipy][sice_tools_gui.py]]
  - [[#SCDApy][SCDA.py]]
  - [[#SCDAxml][SCDA.xml]]
  - [[#sicepy_multiprocessingpy][sicepy_multiprocessing.py]]
  - [[#S3_wrappersh][S3_wrapper.sh]]
  - [[#S3_NRTsh][S3_NRT.sh]]
  
  
* Development Environment
+ These tools have been developed using a conda virtual environment that can be identically recreated. To this end, create a new      
  environment using [[./SICE_tools.yml]] as below:
  #+BEGIN_SRC bash :results verbatim
  conda env create -f SICE_tools.yml
  #+END_SRC
  =ResolvePackageNotFound= error can be raised. In that case, run =conda env export --no-builds > SICE_tools.yml= instead. \\
  Then, run =conda activate SICE_tools= to activate this new virtual environment.


+ The repository can also be run interactively on Binder, without any download:

  [[https://mybinder.org/v2/gh/AdrienWehrle/SICE_tools/master][https://mybinder.org/badge_logo.svg]]

* Tools description
** extract_esalc.py
+ Clips, reprojects and compresses [[https://www.esa-landcover-cci.org/?q=node/197][ESA global Land Cover (ESALC) products]] (downloadable [[https://cds.climate.copernicus.eu/cdsapp#!/dataset/satellite-land-cover?tab=form][here]]) for a given region. Converts the resulting .tif file to be usable in the [[https://github.com/mankoff/SICE][SICE toolchain]]. 
+ Iceland, Svalbard, FransJosefLand, NovayaZemlya, SevernayaZemlya, JanMayen, NorthernArcticCanada, SouthernArcticCanada, Norway, Beaufort and AntarcticPeninsula are currently implemented.
+ Results have been merged with the master branch of the [[https://github.com/mankoff/SICE][SICE toolchain]] and can be found [[https://github.com/mankoff/SICE/tree/master/masks][here]].
+ A description of the 22 [[https://www.esa-landcover-cci.org/?q=node/197][ESA global Land Cover (ESALC) products]] can be found [[https://www.esa-landcover-cci.org/?q=webfm_send/84][here]].

** extract_arcticdem.py
+ Clips [[https://www.pgc.umn.edu/data/arcticdem/][ArcticDEM]] (downloadable [[http://data.pgc.umn.edu/elev/dem/setsm/ArcticDEM/mosaic/v3.0/][here]]) derived slopes and slope aspects for a given region based on a mask. 
+ Slopes and slope aspects have been computed using the [[https://step.esa.int/main/toolboxes/snap/)][SNAP]] Slope Calculation operator. 
+ Masks have been generated using [[./extract_esalc.py]].

** get_IBOAR.py
+ Computes Effective Solar Zenith Angles (SZA) and Viewing Zenith Angles (VZA) based on [[https://github.com/maximlamare/s3_tools/blob/master/change_tiepoint.py][s3_tools]]. 
+ The Intrinsic Bottom of Atmosphere Reflectance (IBOAR) is calculated for a given scene and given bands. 
+ Uses ArcticDEM derived slopes and slope aspects generated using [[./extract_arcticdem.py]] and Rayleigh corrected Bottom of atmosphere Reflectances (BRR) using the [[https://step.esa.int/main/toolboxes/snap/)][SNAP]] Rayleigh Correction Processor. 
+ This code has been applied to Top of Atmosphere (TOA) reflectances in the [[https://github.com/mankoff/SICE][SICE toolchain]] to implement a slope correction for the albedo and the snow grain diameter. 

** SICE_products_availability.py
+ Checks the availability of the [[https://github.com/mankoff/SICE][SICE toolchain]] products using a list or a csv file containing the product names.
+ Option to run the functions using multiprocessing to drastically decrease computation time.
+ Outputs can be visualised through a figure and/or saved in a csv file.

** get_correlations.py
+ Computes the correlation between two variables stored in rasters over a given specific area.
+ The default variables are the Snow Grain Diameter (SGD) computed by the [[https://github.com/mankoff/SICE][SICE toolchain]] and the   
  percentage of variations between the Bottom Of Atmosphere Reflectance (BOAR) and the Intrinsic Bottom Of Atmosphere Reflectance 
  (IBOAR) determined by [[./get_IBOAR.py]]. This example can be easily modified with other variables and      
  another function to apply.
+ The function is run using multiprocessing to drastically decrease computation time.

** sice_tools_gui.py
+ Basis for a simple GUI to play interactively with different tools.
+ A file open dialog, a matplotlib-hosted visualisation conserving projections (using [[https://rasterio.readthedocs.io/en/latest/][rasterio]]), a 1D profile creation as well as a file save dialog are currently implemented. 

** SCDA.py
+ Implementation of the Simple Cloud Detection Algorithm (SCDA) v2.0 using SLSTR bands, described in Fig. 5 of METSÄMÄKI et al, 2015. \\
  [[https://www.sciencedirect.com/science/article/abs/pii/S0034425714003630][METSÄMÄKI, Sari, PULLIAINEN, Jouni, SALMINEN, Miia, et al. Introduction to GlobSnow Snow Extent products with considerations for     
  accuracy assessment. Remote Sensing of Environment, 2015, vol. 156, p. 96-108.]]
+ v1.4 is also implemented based on the GlobSnow [[https://www.globsnow.info/docs/GlobSnow_technical_note2_scda_final_release.pdf][Technical note 2: Cloud Detection Algorithm SCDA]].
+ Channel S5 is calibrated as indicated in the [[https://sentinel.esa.int/documents/247904/2731673/Sentinel-3A-SLSTR-Product-Notice-Level-1B-NRT][Sentinel-3 Product Notice - SLSTR]].
+ The original syntax has been preserved to easily link back to sources.
+ The algorithm can be run using multiprocessing to drastically decrease computation time.
+ This code has been merged with the master branch of the [[https://github.com/mankoff/SICE][SICE toolchain]] and can be found             [[https://github.com/mankoff/SICE/blob/master/SCDA.py][here]]. 
 
** SCDA.xml
+ Extracts, resamples and reprojects SLSTR bands needed for [[./SCDA.py]]. 
+ This file has been merged with [[https://github.com/mankoff/SICE/blob/master/S3.xml][S3.xml]] in the the master branch of the [[https://github.com/mankoff/SICE][SICE toolchain]].
  
** sicepy_multiprocessing.py
+ Runs [[https://github.com/mankoff/SICE/blob/master/sice.py][sice.py]], part of the [[https://github.com/mankoff/SICE][SICE toolchain]], using python multiprocessing with different strategies depending on whether the user runs one or multiple years and dates. 

** S3_wrapper.sh
+ Wrapper of the [[https://github.com/mankoff/SICE][SICE toolchain]] containing the modifications needed to run the option associated with [[./sicepy_multiprocessing.py]].

** S3_NRT.sh
+ Wrapper of the [[https://github.com/mankoff/SICE][SICE toolchain]] modified to run Near Real-Time (NRT) over the 11 implemented arctic regions (Greenland, Iceland, Svalbard, Novaya Zemlya, Severnaya Zemlya, Frans Josef Land, Northern Arctic Canada, Southern Arctic Canada, Jan Mayen, Norway, Beaufort).
+ Example of a Cron job: 
  #+BEGIN_SRC bash :results verbatim
    # m h  dom mon dow   command
    00 12 * * * /bin/bash -c "/path/to/wrapper/S3_NRT.sh" > /path/to/log/log_NRT.txt
  #+END_SRC

